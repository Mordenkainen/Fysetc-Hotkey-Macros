########################
##### PRINTER_MACROS.CFG
########################

# NOTE: These macros are provided as EXAMPLES ONLY. These must be customized for your printer, configurations, and tools!!!!!

# Custom State Tracking:
# I had some issues trying to get Klippers built in "printer.idle_timeout.state" to track the printer state.
# My solution is to attempt to track if the printer is printing or not manually, and this state information is
# used in the Macros for detecting button presses and updating LEDs to ensure only buttons for valid options 
# are shown or work at any given time. You may not need this, and may be able to ignore state, or use the Klipper
# provided state information.

# To use the custom state tracking, in your slicer add the following to the beginning of your Slicer Start G-Code (without the leading #):
# _SET_STATE_PRINTING
# Also ensure your PRINT_END, PRINT CANCELED, and "idle_timeout" G-Code include the following line (without the leading #):
# _SET_STATE_IDLE


# This provides additional G-Code to be run by the Mainsail provided Pause, Resume, And Cancel Print Macros As well as parking information for those macros. 
# This will need to be adapted to whatever is providing your Pause, Resume, and Cancel Print Macros (Mainsail, Fluidd, Happy Hare, Etc.)
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 5.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 358.0   ; custom y position; value must be within your defined min and max of Y
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_user_pause_macro : "_ON_PAUSE"    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: "_ON_RESUME"    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: "_ON_CANCEL"    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:


##################################
# Print State Tracking G-Code
##################################
[gcode_macro _STATE_VARS]
variable_is_printing: False
gcode:

[gcode_macro _SET_STATE_PRINTING]
gcode:
   SET_GCODE_VARIABLE MACRO=_STATE_VARS VARIABLE=is_printing VALUE=True

[gcode_macro _SET_STATE_IDLE]
gcode:
   SET_GCODE_VARIABLE MACRO=_STATE_VARS VARIABLE=is_printing VALUE=False

##################################
# Sample Printer "Lifecycle" Macros
# This shows the additional Macros to be added to ensure proper LED updates
##################################
[gcode_macro _PRINT_END]
gcode:
   SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
   # Set printing state to idle
   SET_STATE_IDLE
    
   #############################
   # YOUR PRINT_END G-CODE HERE!
   #############################
	
   # Set Hotkey LED state for print completed
   _HOTKEY_COMPLETE
    
   RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro _ON_CANCEL]
gcode:
   # Set printing state to idle
   _SET_STATE_IDLE
  
   #############################
   # YOUR CANCEL_PRINT G-CODE HERE!
   #############################
  
   # Set Hotkey LED state for print completed
   _HOTKEY_COMPLETE

[gcode_macro _ON_PAUSE]
gcode:
   # Set Hotkey LED state for print paused
   _HOTKEY_PAUSE

[gcode_macro _ON_RESUME]
gcode:
  # Set Hotkey LED state for printing
  _HOTKEY_RESUME

##################################
# Sample idle_timeout Macro
# This allows the HotKeys LEDs to be turned off when the printer goes to sleep
##################################
[idle_timeout]
timeout: 1800
gcode:
  # Set printing state to idle
  _SET_STATE_IDLE
  
  # Set Hotkey LED state for sleep
  _HOTKEY_STANDBY

  #############################
  # YOUR idle_timeout G-CODE HERE!
  # Should probably include the two lines below at a minimum!
  #############################
  TURN_OFF_HEATERS
  M84

##################################
# Sample "utility" Macros to demonstrate how to update the LEDs when these
# utilities are called by G-Code. This allows you to (for example) "flash"
# the Home button whenever the printer is homed, even if not done via the button.
# These will likely need to be changed to suit the utility macros you use
##################################

# Overridden G28 for LED updates when using "Safe_Z_Homing".
# Note if using a "Homing_override" the LED commands would go there
[gcode_macro G28]
rename_existing: G28.1
gcode:
  # Set HOME button to flash
  SET_LED_EFFECT EFFECT=hotkey_led_button_3_activated REPLACE=1
  
  # HOME the printer
  G28.1 {rawparams}
  
  # Restore LEDS to proper state
  # Note that in this example, and some others, the LED state of the buttons may have been
  # altered by the action that was just done (Because we Homed, the QGL, Park, and Clean buttons are now valid
  _HOTKEY_SET_CURRENT_STATE

# Overridden QUAD_GANTRY_LEVEL for LED updates
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    # Set QGL button to flash
    SET_LED_EFFECT EFFECT=hotkey_led_button_2_activated REPLACE=1
	
	# Level the Gantry
    _QUAD_GANTRY_LEVEL
	
    # Restore LEDS to proper state
    _HOTKEY_SET_CURRENT_STATE

# Sample Nozzle Clean Macro for LED updates (I use Blobifier, change for your Nozzle Cleaning Macro of choice)
gcode_macro CLEAN_NOZZLE]
gcode:
    # Set Nozzle Cleaning button to flash
    SET_LED_EFFECT EFFECT=hotkey_led_button_6_activated REPLACE=1
	
	# Clean the Nozzle
    BLOBIFIER_CLEAN
	
	# Wait for cleaning to complete. This waits for all pending moves to complete before continuing
    M400
	
    # Restore LEDS to proper state
    _HOTKEY_SET_CURRENT_STATE